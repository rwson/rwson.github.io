<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>异步流控制 on rwson</title>
    <link>/categories/%E5%BC%82%E6%AD%A5%E6%B5%81%E6%8E%A7%E5%88%B6/</link>
    <description>Recent content in 异步流控制 on rwson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 14 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E5%BC%82%E6%AD%A5%E6%B5%81%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编写你自己的async.waterfall</title>
      <link>/post/2017-05-14-write-your-async.waterfall/</link>
      <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-05-14-write-your-async.waterfall/</guid>
      <description>在早期的异步开发中，如果有一些异步任务需要处理，难免会遇到回调地狱，为了解决这种问题，也出现过很多第三方库来避免，其中async.js就是比较有名的一个，里面有个waterfall方法，本文我们一起来模拟实现一个类似的
先来看下调用
waterfall([ 	function(cb) { 	console.log(new Date); 	setTimeout(function() { 	cb(null, 123); 	}, 2000); 	}, 	function(arg, cb) { 	console.log(new Date); 	setTimeout(function() { 	console.log(arg); 	cb(null, 123, 456); 	}, 2000); 	}, 	function(arg1, arg2, cb) { 	console.log(new Date); 	console.log(arg1, arg2); 	} ], function(ex) { 	if (ex) { 	throw ex; 	} }); 下面我们一起来看下实现下waterfall这个方法 :
/** * @param task 任务队列 * @param callback 最后的回调 **/ module.</description>
    </item>
    
  </channel>
</rss>
