<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on rwson</title>
    <link>/categories/react/</link>
    <description>Recent content in React on rwson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 28 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="/categories/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React事件绑定终极优化方案</title>
      <link>/post/2019-09-28-react-binding-events-with-arguments/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-09-28-react-binding-events-with-arguments/</guid>
      <description>React作为目前炙手可热的前端框架，里面有很多吸引人的地方，但是也有一些开发体验不太好的地方，比如我们平时做事件绑定的时候要显示的绑定this，否则就可能导致各种bug，关于事件this绑定也有很多种形式，各种方法都有优劣，下面我们将对照几种绑定方式来进行对比，最终实现一个适合自己的方案
在构造函数中进行绑定 class App extends Component {  constructor (props) {  super(props)  this.state = {  t: &amp;#39;t&amp;#39;  }  // this.bind1 = this.bind1.bind(this) 无参写法  this.bind1 = this.bind1.bind(this, this.state.t)  }   // 无参写法  // bind1 () {  // console.log(&amp;#39;bind1&amp;#39;, this)  // }   bind1 (t, event) {  console.log(&amp;#39;bind1&amp;#39;, this, t, event)  }   render () {  return (  &amp;lt;div&amp;gt;  &amp;lt;button onClick={this.</description>
    </item>
    
    <item>
      <title>redux-logic源码阅读</title>
      <link>/post/2018-06-06-read-redux-logic/</link>
      <pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-06-read-redux-logic/</guid>
      <description>在用React和Redux做开发时, 都会用到异步的一些东西, 之前更多的用的是redux-thunk或者redux-saga之类的, 但是都有用的不顺的地方, 有一次突然发现redux-logic是一个很不错的解决方案, 用起来也感觉很顺手, 与市面上其他redux中间件不同的分析都在这里, 感兴趣的可以自己查看。
首先我们来看下redux-logic的基本用法:
 //	logic/index.js import { createLogic } from &amp;#39;redux-logic&amp;#39;;  const someLogic = createLogic({ 	//	当前logic监听的actionType 	type: &amp;#39;SOME_ACTION_TYPE&amp;#39;,  	//	取消当前logic执行的actionType 	cancelType: &amp;#39;CANCEL_TYPE&amp;#39;,  	//	是否获取最后一个返回 	latest: true,  	//	当前actionType的业务逻辑 	async process({ getState, action, cancelled }, dispatch, done) { 	const res = await asyncFn(); 	dispatch(newAction({ 	...res 	})); 	done(); 	} });  export someLogic;  //	store/index.</description>
    </item>
    
    <item>
      <title>从零开始写一个React - setState和生命周期</title>
      <link>/post/2017-09-14-write-your-own-react-2/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-09-14-write-your-own-react-2/</guid>
      <description>在前面一篇中我们用instantiateReactComponent方法来根据node的不同来返回不同的组件实例，之前的分类可能有些问题，就是当该组件中JSX部分有返回null的情况，instantiateReactComponent就不能返回正确的组件，所以在这里加了一种新的组件类型：ReactEmptyComponent，作用就是返回一段空的注释，标记这是一个空组件：
export function instantiateReactComponent(node) {  if (lodash.isNull(node) || lodash.isUndefined(node)) {  return new ReactEmptyComponent(null);  }   // ... }  // 空组件 export class ReactEmptyComponent {  constructor(node) {  this.type = &amp;#34;ReactEmptyComponent&amp;#34;;  this._currentElement = null;  this._rootNodeID = null;  }   /** * 空组件挂载直接返回一段空注释回去 */  mountComponent(rootID) {  this._rootNodeID = rootID;  return `&amp;lt;!-- empty component data-reactid=&amp;#34;${this._rootNodeID}&amp;#34; --&amp;gt;`;  } } 我们之前简单实现了一个初始化渲染的过程，现在我们一起实现一个setState方法以及组件后面的更新逻辑。setState是在组件中被调用的，所以我们需要在之前的Component类中加入一个setState方法：</description>
    </item>
    
    <item>
      <title>从零开始写一个React - 初始化渲染</title>
      <link>/post/2017-09-04-write-your-own-react-1/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-09-04-write-your-own-react-1/</guid>
      <description>我们知道React组件返回的是JSX，而JSX将被babel转换，在React中是将JSX中转换成React.createElement(type, config, children)的形式。
class App extends Component {  render() {  return &amp;lt;div className=&amp;#34;app-container&amp;#34;&amp;gt;App Component&amp;lt;/div&amp;gt;  } }  //	babel转换后输出的代码 var App = React.createClass({  render() {  return React.createElement(&amp;#34;div&amp;#34;, {  className: &amp;#34;app-container&amp;#34;  }, &amp;#34;App Component&amp;#34;)  } }); 我们可以在babel中把JSX的pragma转换改成自己的函数名:
{  &amp;#34;presets&amp;#34;: [  &amp;#34;es2015&amp;#34;  ],  &amp;#34;plugins&amp;#34;: [  [&amp;#34;transform-react-jsx&amp;#34;, {  &amp;#34;pragma&amp;#34;: &amp;#34;createElement&amp;#34;	//	默认的是React.createElement, 这里我们还是用默认的  }]  ] } 下面一起看看createElement的实现</description>
    </item>
    
    <item>
      <title>React Native自定义原生模块</title>
      <link>/post/2016-01-12-expend-objectc/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-12-expend-objectc/</guid>
      <description>现如今，越来越多的移动开发者选择用React Native来开发他们的app。虽然React Native提供了强大的API供我们调用，但是对于一些功能(比如第三方支付、文件上传之类的)，原生模块中并没有提供给我们相关的API，这时候就需要我们来自己封装一些东西来给js端调用。这边以ios端的为例来介绍。
 模块配置表 在RN加载的时候，所有注册并且符合规范的模块都会被导出并且生成相应的模块数据类RCTModuleData，而模块数据中缓存了模块的对象实例，以及模块索引id。
最后大概生成一个如下的模块配置表:
{ &amp;quot;remoteModuleConfig&amp;quot;: { &amp;quot;className&amp;quot;: { &amp;quot;methods&amp;quot;: { &amp;quot;method&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;remote&amp;quot;, &amp;quot;methodID&amp;quot;: 0 }, ... }, &amp;quot;moduleID&amp;quot;: 4 }, ... }, }  通信流程 先看一个js调用OC的下的方法走了哪些步骤:
1.JS端调用某个OC模块暴露出来的方法。
2.把上一步的调用分解为ModuleName,MethodName,arguments，再扔给MessageQueue处理。
3.在这一步把JS的callback函数缓存在MessageQueue的一个成员变量里，用CallbackID代表callback。在通过保存在MessageQueue的模块配置表把上一步传进来的ModuleName和MethodName转为ModuleID和MethodID。
4.把上述步骤得到的ModuleID,MethodId,CallbackID和其他参数argus传给OC。至于具体是怎么传的，后面再说。
5.OC接收到消息，通过模块配置表拿到对应的模块和方法。
6.RCTModuleMethod对JS传过来的每一个参数进行处理。
7.OC模块方法调用完，执行block回调。
8.调用到第6步说明的RCTModuleMethod生成的block。
9.block里带着CallbackID和block传过来的参数去调JS里MessageQueue的方法invokeCallbackAndReturnFlushedQueue。
10.MessageQueue通过CallbackID找到相应的JS callback方法。
11.调用callback方法，并把OC带过来的参数一起传过去，完成回调。
整个流程就是这样，简单概括下，差不多就是：JS函数调用转ModuleID/MethodID -&amp;gt; callback转CallbackID -&amp;gt; OC根据ID拿到方法 -&amp;gt; 处理参数 -&amp;gt; 调用OC方法 -&amp;gt; 回调CallbackID -&amp;gt; JS通过CallbackID拿到callback执行
下面就简单分享一个从OC暴露方法到JS端调用的例子：
// OC(RCTDeviceExtension.m) #import &amp;quot;RCTBridgeModule.h&amp;quot; #import &amp;quot;RCTUtils.h&amp;quot; // RCTScreenSize用到 @interface RCTDeviceExtension : NSObject &amp;lt;RCTBridgeModule&amp;gt; @end @implementation RCTDeviceExtension RCT_EXPORT_MODULE(); // 暴露一个模块 /** 获取设备的相关信息 **/ static NSDictionary *DynamicDimesions(){ CGFloat width = MIN(RCTScreenSize().</description>
    </item>
    
    <item>
      <title>React中的受控组件</title>
      <link>/post/2016-01-05-react-controlled-compoent/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-05-react-controlled-compoent/</guid>
      <description>表单是web应用中不可缺少的一部分,不同于其他元素,表单需要响应用户输入,根据输入值的不同响应不同的状态,React基于props和state的渲染机制,可以很好的处理表单。在React中表单分为受控组件和非受控组件两种。
受控组件 - 受React控制的值 </description>
    </item>
    
    <item>
      <title>React中的DOM操作</title>
      <link>/post/2015-12-05-react-dom/</link>
      <pubDate>Sat, 05 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-12-05-react-dom/</guid>
      <description>大多数情况下，React的虚拟DOM已经可以创建我们想要的用户体验，而根本不需要直接操作底层真实的DOM，通过组件的复合，把负责的交互聚合为呈现给用户的连贯整体。
但是在某些情况下，比如与一个没有使用React的第三类库的整合，或者执行一个React没有原生支持的操作等等，我们就不得不去操作底层DOM来达到我们的目的。
DOM操作  访问受控制的DOM节点  React提供了一个受其自身控制的方法，这些方法只有在生命周期的相关方法里才有效。我们可以给组件的相关元素添加一个ref属性来实现。
var CanvasComponent = React.createClass({ render:function(){ return ( &amp;lt;canvas ref=&amp;quot;canvasEle&amp;quot; /&amp;gt; ); } });  这样就可以通过this.refs.canvasEle来访问到这个canvas节点了，需要注意的是这里的ref属性必须是唯一的，如果定义了相同的ref也是&amp;quot;canvasEle&amp;quot;，那么操作将无效。
一旦访问到了该元素，那么就可以通过getDOMNode()方法来访问底层的DOM节点，需要注意的是，不要在render方法中尝试用该方法，因为在render方法执行完之前，组件还未挂载，该DOM节点不是最有效的，所以可能会报异常。
所以要在组件被挂载后使用，比如componentDidMount或者一些用户操作后的事件处理函数，就像下面这样：
var CanvasComponent = React.createClass({ render:function(){ return ( &amp;lt;canvas ref=&amp;quot;canvasEle&amp;quot; /&amp;gt; ); }, componentDidMount:function(){ var oCanvas = this.refs.canvasEle.getNode(); // 现在oCanvas就是我们的canvas节点，可以调用canvas下的相关方法来进行操作 } });  React的refs和getDOMNode很强大，但是使用它们可能会导致React在性能上的一些问题，所以我们不到在没有其他方式的时候，尽量不要用它们来解决问题。
 #####整合非React类库
 很多成熟的javaScript类库并没有使用React构建，此时就需要我们自己来进行整合。
比如现在要使用一个autocomplete插件，包含下面的基础代码：
autocomplete({ target:document.getElementById(&amp;quot;select&amp;quot;), data:[ &amp;quot;option1&amp;quot;,&amp;quot;option2&amp;quot;,&amp;quot;option2&amp;quot; ], events:{ select:function(item){ alert(&amp;quot;你选择了&amp;quot; + item); } } });  这个类库需要一个DOM节点，一个数组，一个事件的相关对象，所以，这里就用到了DOM操作，刚才提到，在React中使用DOM操作要在组件挂载完成后或一些事件处理函数中完成。
var SelectComponent = React.</description>
    </item>
    
    <item>
      <title>React组件的复合和mixin</title>
      <link>/post/2015-12-04-react-component-mixin/</link>
      <pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-12-04-react-component-mixin/</guid>
      <description>在传统的HTML中，元素是构成页面的基础单元。但在React中，组件是构建页面的基础单元。我们可以把React中的组件理解成混入了javaScript表达能力的HTML元素。在React中，一个组件就相当于一个javaScript函数，它接收props和state作为参数，并且输入渲染好的DOM，组件的意义在于用来呈现和表达应用中的某一部分数据。
组件的复合 我们都知道，在React中声明一个组件用React.createClass的方法，但是React并没有给我们提供一个叫React.extendClass的方法让我们来拓展或继承已经声明好的组件。我们可以通过组件复合的方法来构造一个新的组件。
下面是一个组件复用的例子：
我们现在要渲染一个选择题组件MultipeChoice，包含多个选项RadioInput。
 选项组件  先来组装HTML：
var RadioInput = React.createClass({ render:function(){ return ( &amp;lt;div className=&amp;quot;redio&amp;quot;&amp;gt; &amp;lt;label&amp;gt; &amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt; 选项说明 &amp;lt;/label&amp;gt; &amp;lt;/div&amp;gt; ); } });  现在一个选项的HTML就组件完成了，但是现在内容和选项的值都是写死的，所以我们需要给这个组件添加一些属性，下面继续完善这个组件：
var RadioInput = React.createClass({ // propTypes给组件增加一个说明,标明每个prop属性的类型和是否必填 propTypes:{ id:React.PropTypes.string, name:React.PropTypes.string.isRequired, label:React.PropTypes.string.isRequired, value:React.PropTypes.string.isRequired, checkd:React.PropTypes.bool }, // getDefauleProps可以给一些非必填属性指定默认值 getDefauleProps:function(){ return { id:null, checked:false }; } });  现在组件有了相应的props了，我们的组件需要随着时间而变化的数据，id对于每个实例来说相当重要，以及用户能随时更新的checked值，现在需要定义一些初始状态。
var RadioInput = React.createClass({ ... getInitialState:function(){ var id = this.props.id || (new Date().getTime()).toString(32); // 如果没传id,就拿当前时间戳生成一个 return { id:id, name:id, checked:!</description>
    </item>
    
    <item>
      <title>React中的事件</title>
      <link>/post/2015-12-03-react-events/</link>
      <pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-12-03-react-events/</guid>
      <description>对于用户界面来说，展示最多只占整体因素的一半，另一半则是用户输入，即通过javaScript来完成人机交互。
在React中，通过将事件绑定到组件上到形式来对事件进行处理。在触发事件的同时，相关处理函数对组件对状态进行修改，再调用render方法重绘，达到响应用户输入的目的。
绑定事件处理器 React的事件本质上和原生的javaScript类似，比如MouseEvent用来处理用户鼠标点击，Change用来处理表单元素的变化等，所有事件在命名上和JavaScript规范一致，并且会在相同的情况下被触发。
React绑定事件的写法和在HTML上绑定事件的写法很像，比如我们下面将绑定一个click事件:
... handleClick:function(){ ... }, render:function(){ return ( &amp;lt;button onClick={this.handleClick}&amp;gt;click&amp;lt;/button&amp;gt; ); }, ...  这样，我们就完成了一个click事件的绑定，当用户点击这个按钮，handleClick将被调用，完成一些逻辑。
就拿刚才上面的代码举例,我们在handleClick中用this,此时发现this指向了window对象,所以如果要在里面读取state/prop就比较麻烦,这时可以通过ES5中的bind方法来修改this的指向,就像下面这样:
... handleClick: function(){ // ... }, render: function(){ return ( &amp;lt;button onClick={this.handleClick.bind(this, [....argus])}&amp;gt;click&amp;lt;/button&amp;gt; ); }, ...  后面还可以传入参数,还可以在getInitialState(或者ES6语法的constructor里)手动指定一个新属性,来达到修改this指向的目的:
  ES5
// &amp;hellip;
var Comp = React.createClass({
 getInitialState: function() { this.handleClick = this._handleClick.bind(this); }, _handleClick: function() { // 事件的处理逻辑 }, render: function() { return ( &amp;lt;button onClick={this.handleClick}&amp;gt;click&amp;lt;/button&amp;gt; ); }  });</description>
    </item>
    
    <item>
      <title>React中的数据流</title>
      <link>/post/2015-12-02-react-data-flow/</link>
      <pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-12-02-react-data-flow/</guid>
      <description>昨天学习完组件的生命周期，今天学习学习React中的数据流。
在React中，数据流是单向的(由父节点传递到子节点)，因此组件变得简单且易于把握，它们只需要从父节点中获取props来渲染即可，某个组件顶层的props发生改变，React会递归遍历整个组件树，并且重新渲染使用这个属性的组件。
在React组件内部，还具有自己的状态，但是只能在组件内部进行修改。
React中的props: props就是properties的缩写，接收任意类型的数据。
设置组件的props有两种方法:
  可以在挂载组件的时候设置
 var surveys = [ { &amp;quot;title&amp;quot;:&amp;quot;some value&amp;quot; } ]; &amp;lt;ListSurveys surveys={surveys} /&amp;gt;    或者调用组件实例的setProps方法
var surveys = [ { &amp;quot;title&amp;quot;:&amp;quot;some value&amp;quot; } ]; var listSurveys = React.render(&amp;lt;ListSurveys/&amp;gt;,document.body); listSurveys.setProps({&amp;quot;surveys&amp;quot;:surveys});    需要注意的是，只能在子组件或者组件树外面调用setProps方法，但是不能用this.setProps，如果非要这样，可以用state来代替。
可以通过this.props来访问props，但是不能修改，组件不能对自己的props进行修改。
JSX中props的几种使用
  把props设置成字符串
 &amp;lt;a href=&amp;quot;/a/b&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;    用JSX中的展开语法({&amp;hellip;obj})把props设置成一个对象
 var aComponent = React.createClass({ render:function(){ var props = { &amp;quot;a&amp;quot;:&amp;quot;foo&amp;quot;, &amp;quot;b&amp;quot;:&amp;quot;bar&amp;quot; }; return ( &amp;lt;aComponent {.</description>
    </item>
    
    <item>
      <title>React组件生命周期</title>
      <link>/post/2015-12-01-react-component-life-time/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-12-01-react-component-life-time/</guid>
      <description>在React的组件生命周期中，随着该组件的props活着state发生改变，对应的DOM也随着变换，一个组件对于特定的输入，它将返回一致的输出。
在React中，对于每个组件都提供了相应的钩子去响应：
 创建时(实例化) 存在期(活动期) 销毁期   实例化 在React的一个组件被实例化时，将依次调用以下一些方法
getDefaultProps:  对于某个组件类，该方法只会被调用一次。对于那些没有被父组件指定props属性的组件来说，该方法返回默认的props
getInitialState  对于该组件的每个实例来说，该方法有且只能被调用一次，在这里，我们可以对每个组件的状态进行初始化，和getDefaultProps不同的是，getInitialState在每次被实例化时都会被调用(个人感觉这一点感觉和js面向对象中的构造方法和原型类似，getDefaultProps相当于一个原型，getInitialState相当于构造方法，然后所有实例都享有同一个原型)，由于getDefaultProps在该方法之前被调用，所以此时我们已经可以访问到this.props了
componentWillMount  该方法在首次完成渲染之前被渲染，在这个方法里面，我们可以修改组件的一些state，需要注意的是，这是该组件完成实例化之前的最后一次修改
render  渲染虚拟DOM，对应一个组件来说，render方法是唯一一个必须实现的，并且遵循以下特殊的几个规则：
  只能通过this.props和this.state来访问数据
  可以返回null，boolean值或者任何形式的组件
  只能出现一个顶级组件(不能返回多个一级标签并列)
componentDidMount 组件被实例化完成(render执行成功)后调用，可以在该方法中用this.getDOMNode()来访问到该组件，在这个方法中，比如我们要运行我们自定义的一个jQuery插件时，就可以直接写在里面，但是如果React运行在服务端，该方法将不会被调用
  活动期 随着组件的一些状态(比如鼠标点击、键盘输入等)发生改变，将依次调用以下一些方法
componentWillReciveProps  在任意时刻，组件的props都可以通过父辈组件来修改，此时将调用该方法，我们可以在该方法对组件的state进行更新
showComponentUpdate  当props或者state发生改变，我们可以在该方法中进行比较修改前和修改后的数据，返回一个boolean值，React会根据这个来判断是否需要重新进行渲染
componentWillUpdate  和上一阶段的componentWillMount类似，只不过该方法是在重新进行渲染之前被调用
render  重新渲染虚拟DOM
componentDidUpdate  也和componentDidMount类似，只不过是在完成重新渲染之后被调用
销毁期 最后该组件被使用完成，下面的方法将会给这个组件提供自身清理的机会
componentWillUnmount  比如我们在该组件中设置了一个定时器，添加了某些事件绑定等等，该方法就负责把定时器清除，移除事件监听的
以上就是React中一个组件的生命周期
 反模式:把计算后的值赋值给state 在getInitialState方法中，我们可以访问到this.props，通过this.props来创建state就是一种反模式。 比如:在组件中,把当前事件转换成字符串格式，就只能在渲染时进行 反模式的写法是不恰当的
反模式中的写法:
... getDefault:function(){ return { &amp;quot;date&amp;quot;:new Date() }; }, getInitialState:function(){ return { &amp;quot;day&amp;quot;:this.</description>
    </item>
    
    <item>
      <title>第一个React Native App</title>
      <link>/post/2015-11-20-my-first-react-demo/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-11-20-my-first-react-demo/</guid>
      <description>这几天在学习React Native,觉得很屌,做了个&amp;quot;Hello World&amp;quot;,拿出来和大家分享下
先说环境搭建把,大致可分为下面几步:
1.首先必备一台Mac 2.然后在App store上下载最新的Xcode 3.Nodejs安装,可以去NodeJs官网下载安装包安装 4.Node也可采用homebrew安装,没有的自行百度,brew安装完成就可以在terminal中运行&#39;brew install node&#39;,改命令执行完成就自动安装了node和npm包管理器 5.安装watchman,一个来自Facebook 的观察程序,终端命令:&#39;brew install watchman&#39; 6也可以有选择的安装flow  到这里环境大致安装完成,下面我们开始安装react-native命令行工具,执行&amp;rsquo;sudo npm install -g react-native-cli&amp;rsquo;,输入密码等待安装完成,我们就可以在命令行用&amp;rsquo;react-native init &amp;rsquo; + 项目名创建一个React Native项目,由于某些原因,初始化过程可能会比较慢,耐心等待几个,这里我创建一个项目,完成一个输入框,在输入完成,请求Github提供的api接口,过滤出符合搜索关键字的项目。
1、首先,我在命令行运行&amp;rsquo;react-native init githubFinder&amp;rsquo;,经过漫长等待,项目创建完成,到项目目录下,打开ios目录,打开githubFinder.xcodeproj,就可以在Xcode中打开ios版本的项目了,然后打开index.ios.js文件,编写相关逻辑。
&amp;quot;use strict&amp;quot;; var React = require(&amp;quot;react-native&amp;quot;); var baseURI = &amp;quot;https://api.github.com/search/repositories?q=&amp;quot;; // 请求参数的url前缀 var { AppRegistry, Image, ListView, StyleSheet, Text, TextInput, View, } = React; // 注入相关组件到React中 var githubFinder = React.createClass({ /** 定义组件初始状态值,也就是一个对象 */ &amp;quot;getInitialState&amp;quot;:function(){ return { &amp;quot;dataSource&amp;quot;:new ListView.DataSource({ &amp;quot;rowHasChanged&amp;quot;:(r1,r2) =&amp;gt; r1 !</description>
    </item>
    
  </channel>
</rss>
