<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>闭包 on rwson</title>
    <link>/categories/%E9%97%AD%E5%8C%85/</link>
    <description>Recent content in 闭包 on rwson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 18 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E9%97%AD%E5%8C%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>javascript闭包</title>
      <link>/post/2015-07-18-javascript-closure/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-07-18-javascript-closure/</guid>
      <description>本文讨论的javascript不包含ES6标准。
javascript在作用域和其他大多数语言不同, 没有局部变量的的概念,一个变量的作用范围就是它所在的函数,且没有块级作用域的概念。
我们可以通过下面的代码理解下上面的话:
var variable1 = 1; function A() { console.log(variable1); if(true) { var variable2 = &amp;quot;variable2&amp;quot;; } console.log(variable2); } A(); // 最终打印出1和variable2这个字符串  可能类似的代码放到其他语言中,我们在if外面访问variable2时,就会报错,但在javascript中不会。
刚才说&amp;quot;一个变量的作用范围就是它所在的函数&amp;quot;,可以通过下面的代码验证下:
function A() { var variable1 = &amp;quot;variable1&amp;quot;; } A(); console.log(variable1); // Uncaught ReferenceError: variable1 is not defined  此时在函数外部就无法访问函数内定义的变量。
但是如果不用var关键字的话,情况就不一样了
function A() { variable1 = &amp;quot;variable1&amp;quot;; } A(); console.log(variable1); // 最终打印出variable1这个字符串  因为不用var的话,就相当于声明了一个全局变量。
但是有时候,我们就是想读取函数内部变量,该怎么做呢?可以像下面这样:
function A() { var variable1 = &amp;quot;variable1&amp;quot;; return function() { console.</description>
    </item>
    
  </channel>
</rss>
