<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>继承 on rwson</title>
    <link>/categories/%E7%BB%A7%E6%89%BF/</link>
    <description>Recent content in 继承 on rwson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 24 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E7%BB%A7%E6%89%BF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>实现模块化编程</title>
      <link>/post/2016-03-24-javascript-self-loader/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-03-24-javascript-self-loader/</guid>
      <description>先上个小例子(工资计算器):
  传统
 // 绩效奖金 function performanceCoefficient(salary) { return salary * 0.2; } // 住房公积金 function companyReserve(salary) { return salary * 0.2; } // 个人所得税、五险一金 function incomeTax(remain) { return (remain - 3500) * 0.2; } // 基本工资 var salary = 10000; // 最后税前工资 var finalSalary = salary + performanceCoefficient(salary); finalSalary = finalSalary - incomeTax(finalSalary - companyReserve(finalSalary)); console.log(finalSalary);    类模块化
 // 全局变量,存储已经声明的模块 var modules = {}; // 先来实现几个工具函数 var define = (function() { // 根据depArrs中的模块名称找出modules中的相关对象 var _require = function(depArrs) { return depArrs.</description>
    </item>
    
    <item>
      <title>javascript实现继承之2</title>
      <link>/post/2016-03-10-js-object-extend2/</link>
      <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-03-10-js-object-extend2/</guid>
      <description>在前面的一篇文章JavaScript实现继承介绍过js中通过原型来继承的两种方法
 伪造对象继承:通过把父类的实例赋值给子类的prototype，然后在子类的构造函数中调用父类的构造方法； 类式继承(原型式继承):通过一个空函数中转，把父类的示例赋值给该空函数的原型，然后再把该空函数的prototype赋值给子类的prototype，再在子类的构造方法中调用父类的构造器，实现继承。  综合上面两个方法，其实都通过两次调用父类的构造器来实现，第二种方法相对于第一种只是在子类原型上少了些父类的实例属性。
在《javaScript高级程序》中，介绍了另外一种继承的实现方式，名为&amp;quot;寄生式组合继承&amp;quot;。所谓的寄生式组合继承，不必为了子类的原型而调用超类型的构造函数，要实现继承只需要父类原型的一个副本。下面的具体的代码:
/** * 寄生式组合继承 * @param subType 子类 * @param superType 父类 **/ function inheritPrototype(subType,subperType){ var prototype = Object(superType.prototype); prototype.constructor = subType; subType.prototype = prototype; } /** * 父类 * @param name name属性 **/ function superClass(name) { this.name = name; } superClass.prototype.sayName = function() { alert(this.name); }; /** * 子类 * @param name name属性 * @param age age属性 **/ function subClass(name,age) { superClass.call(this,name); this.age = age; } // 实现继承 inheritPrototype(subClass,superClass);  这样就只调用了一次父类的构造方法，在性能上更优秀。</description>
    </item>
    
    <item>
      <title>javascript实现继承</title>
      <link>/post/2015-05-26-js-object-extend/</link>
      <pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-05-26-js-object-extend/</guid>
      <description>继承:
继承是指一个对象拥有另外一个对象一些公共方法或属性。在大多数其他面向对象语言中，继承一个类只需使用一个关键字即可；但是在JS中想要达到继承公用成员的目的，需要采取一系列措施。JS属于原型式继承，得益于这种灵活性，我们既可以使用标准的基于类的继承，也可以使用更微妙一些的原型式继承。在JS中应该要明确一点，一切继承都是通过prototype来进行的，JS是基于对象来继承的，且不止一种继承方式。
第一种：
/** * 父类SuperClass的构造器 * @param name * @constructor */ function SpuerClass(name){ this.name = name;	} SuperClass.prototype = { &amp;quot;constructor&amp;quot;:SpuerClass, //	修正构造器 &amp;quot;getName&amp;quot;:function(){ return this.name; } //	父类原型对象下的getName方法 }; /** * 子类SubClass的构造器 * @param name * @param age * @constructor */ function SubClass(name,age){ SuperClass.call(this,name); //	SuperClass.apply(this,[name]); //	继承父类构造器 } SubClass.prototype = new SuperClass(); //	继承父类的原型 SubClass.prototype.constructor = SubClass; //	修正子类的构造器 SubClass.prototype.getAge = function(){ return this.age; } //	子类原型对象下的getAge方法  这种继承方式就是最简单的JS继承：伪造对象法。不足之处在于实例化SubClass时会调用两次父类的构造方法，且需要额外的保存原型链中实例化父类的对象，如果在属性和方法比较多的情况下，这样一来性能方面就大打折扣了，效果是达到了，但是执行速率受到了一定的影响。且耦合性较大，于是就有了下面的继承方式。</description>
    </item>
    
  </channel>
</rss>
