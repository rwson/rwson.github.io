<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>接口 on rwson</title>
    <link>/categories/%E6%8E%A5%E5%8F%A3/</link>
    <description>Recent content in 接口 on rwson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 27 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E6%8E%A5%E5%8F%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>javascript接口</title>
      <link>/post/2015-05-27-js-design-mode-interface/</link>
      <pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-05-27-js-design-mode-interface/</guid>
      <description>接口:
接口是提供了一种用以说明一个对象应该具有哪些方法的手段，但它并不规定这些方法应该如何实现。在JS中，没有像其他面向对象程序语言的interface关键字，所以实现的方法也语言不同；JS实现接口的主要方式主要为定义描述法、属性检测法和鸭式辨型法，其中鸭式辨型法是目前用的最多的。
1、定义描述法
/** * interface CompsiteImpl{ * function add(); * function remove(); * function update(); * } */ /** * 实现接口 * @constructor */ function CompsiteImpl(){ } CompsiteImpl.prototype = { &amp;quot;constructor&amp;quot;:CompsiteImpl, &amp;quot;add&amp;quot;:function(){ console.log(&amp;quot;我是add方法！&amp;quot;); }, &amp;quot;remove&amp;quot;:function(){ console.log(&amp;quot;我是remove方法！&amp;quot;); }, &amp;quot;update&amp;quot;:function(){ console.log(&amp;quot;我是update方法！&amp;quot;); } };  此方法也称注释法，顾名思义，就是通过一系列的注释来定义该类需要实现哪些接口方法，这是最简单定义接口的一种方法。但是此方法缺点实在太明显了，比如一个人代码写完了，他只能通过肉眼来判断是不是都把刚才注释里面的方法都实现了；他哪天代码做修改了，是否和注释一致等等的。只是属于一个类似于帮助文档的范畴，太死板。
2、属性检测法
/** * interface Compsite{ * function add(); * function remove(); * function update(); * } * * interface FormItem{ * function select(); * } * */ // 实现接口 // 需要实现 Compsite FormItem function CompsiteImpl(){ // 在类的内部定义一个变量 this.</description>
    </item>
    
  </channel>
</rss>
