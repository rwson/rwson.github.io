<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fetch on rwson</title>
    <link>/categories/fetch/</link>
    <description>Recent content in fetch on rwson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 10 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="/categories/fetch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>fetch中的Timeout</title>
      <link>/post/2016-07-10-fetch-timeout/</link>
      <pubDate>Sun, 10 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-07-10-fetch-timeout/</guid>
      <description>随着ES6的普及,fetch已经渐渐取代了普通ajax在异步请求中的位置,以前在用jQuery中的ajax时,可以指定一个timeout属性,设置该请求的超时时间,但是原生的fetch并不支持该属性,如果遇到遇到一个请求一直pedding状态,就只能干等着,什么也干不了。由于fetch本身在被初始化后返回一个Promise对象,我们就可以对其再包一层Promise来实现在fetch请求中加入timeout的功能。
先来看下fetch的基本用法:
fetch(&amp;quot;some url&amp;quot;, { &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;, &amp;quot;body&amp;quot;: JSON.stringify({ &amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;, &amp;quot;arr&amp;quot;: [1,2,3] }), ... }) // parse response to JSON object .then((res) =&amp;gt; res.json()) .then((res) =&amp;gt; { // success dome something }) .catch((ex) =&amp;gt; { // exception occurded });  在Promise中有个静态方法,叫Promise.race(),该方法接受一个数组作为参数,数组中的每个元素都是一个Promise的实例,大致用法如下:
let promise1 = new Promise((resoleve, reject) =&amp;gt; { // do something }); let promise2 = new Promise((resoleve, reject) =&amp;gt; { // do something }); // ... let race = Promise.</description>
    </item>
    
  </channel>
</rss>
